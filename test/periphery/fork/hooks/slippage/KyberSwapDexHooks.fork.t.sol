// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.29;

import { IERC20 } from "@oz/interfaces/IERC20.sol";
import { Authority } from "@solmate/auth/Auth.sol";
import { IMetaAggregationRouterV2 } from "src/dependencies/kyberswap/interfaces/IMetaAggregationRouterV2.sol";

import { SingleDepositorVault } from "src/core/SingleDepositorVault.sol";
import { BaseVaultParameters, Clipboard, FeeVaultParameters, Operation } from "src/core/Types.sol";

import { ISubmitHooks } from "src/core/interfaces/ISubmitHooks.sol";
import { IWhitelist } from "src/core/interfaces/IWhitelist.sol";
import { IOracle } from "src/dependencies/oracles/IOracle.sol";
import { Encoder } from "test/core/utils/Encoder.sol";

import { OracleRegistry } from "src/periphery/OracleRegistry.sol";
import { IBaseSlippageHooks } from "src/periphery/interfaces/hooks/slippage/IBaseSlippageHooks.sol";

import { MockFeeVaultFactory } from "test/core/mocks/MockFeeVaultFactory.sol";
import { TestForkBaseHooks } from "test/periphery/fork/hooks/TestForkBaseHooks.t.sol";
import { MockChainlink7726Adapter } from "test/periphery/mocks/MockChainlink7726Adapter.sol";

import { MockKyberSwapDexHooks } from "test/periphery/mocks/hooks/slippage/MockKyberSwapDexHooks.sol";
import { MerkleHelper } from "test/utils/MerkleHelper.sol";

contract KyberSwapDexHooksForkTest is TestForkBaseHooks, MockFeeVaultFactory {
    // Mainnet addresses
    address internal constant KYBERSWAP_ROUTER = 0x6131B5fae19EA4f9D964eAc0408E4408b66337b5;
    address internal constant KYBERSWAP_EXECUTOR = 0x0F4A1D7FdF4890bE35e71f3E0Bbc4a0EC377eca3;
    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
    address internal constant CHAINLINK_ETH_USD = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;
    address internal constant CHAINLINK_USDC_USD = 0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6;
    // hardcoded to this address because kyberswap api was called with it
    address payable internal constant VAULT = payable(0xE8496bB953d4a9866e5890bb9eCE401e4C07d633);

    // Test values
    uint256 internal constant INITIAL_WETH_BALANCE = 100 ether;
    uint256 internal constant INITIAL_SIMPLE_WETH_BALANCE = 10 ** 15;
    uint128 internal constant MAX_DAILY_LOSS = 1000 * 10 ** 18; // 1,000 usdc with 18 decimals due to what oracle
        // returns
    uint16 internal constant SLIPPAGE_100BPS = 100; // 1%
    uint16 internal constant MAX_SLIPPAGE = 300; // 3%

    // Test contracts
    SingleDepositorVault public vault;
    MockKyberSwapDexHooks public hooks;
    OracleRegistry public oracleRegistry;

    bytes32[] internal leaves;

    // Path and block number for it can be generated with `script/util/kyberswap_path_generator.sh`
    // Example usage: `script/util/kyberswap_path_generator.sh --input-token 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
    // --output-token 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 --input-amount 100000000000000000000 --slippage 100
    // --vault 0xE8496bB953d4a9866e5890bb9eCE401e4C07d633 --rpc-url $YOUR_RPC_URL`
    uint256 internal constant BLOCK_NUMBER = 22_239_050;

    // set this value along with SWAP_DATA_WETH_USDC
    uint256 internal constant MIN_RETURN_AMOUNT_SWAP = 154_153_324_342;

    // solhint-disable-start max-line-length
    bytes internal SWAP_DATA_WETH_USDC =
        hex"";
    // solhint-disable-end max-line-length

    uint256 internal constant MIN_RETURN_AMOUNT_SIMPLE_SWAP = 1_548_613;

    // solhint-disable-start max-line-length
    bytes internal SWAP_SIMPLE_DATA_WETH_USDC =
        hex"8af033fb0000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000640000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000e8496bb953d4a9866e5890bb9ece401e4c07d63300000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000017a145000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000067f7d69c000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000000010000000000000000000000002e8135be71230c6b1b4045696d41c09db0414226000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040593611990000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000001000000000000000000000000002e8135be71230c6b1b4045696d41c09db0414226000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000010000000000000000000000000017de60000000000000000000000000000000000000000000000000000000000000024f7b22536f75726365223a22222c22416d6f756e74496e555344223a22312e35363430383430363839343033393939222c22416d6f756e744f7574555344223a22312e35343533343039303032303135333238222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231353634323536222c2254696d657374616d70223a313734343239343338302c22526f7574654944223a2239346463666338362d323330392d343133362d396431632d383830326665633864373432222c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22563848612f7276464146736364307a7355594247423238616d4342577768716b622b544361537474514f6738335476417038364a4f485a714a6d4b69664378415043623567364f59794469506c55547378437645654544536a46367136696e304872653446316e31666a6558456173776c7462424c734f47367773763232414866594539566d6c4374637a7a5a4667347674347054644a7231655367544e68796a774f39397679673443534d7644632b7957365166344b4775386e4535546f41612f655952464a7359754c774649695478695839514b75773963696f7866616d47422b374b6833504d4747323775664a4d67423165344b396669326b77446462753556674a5370377561347a6a7a2f4f5449677a52546e4a79765432434f4332484e55714272592f356d704c3070624b5947616c63703177325943757262584330693772784149566c4b5969316a4b376e62426168773d3d227d7d0000000000000000000000000000000000";
    // solhint-disable-end max-line-length

    function setUp() public override {
        // Fork mainnet
        vm.createSelectFork(vm.envString("ETH_NODE_URI_MAINNET"), BLOCK_NUMBER);

        super.setUp();

        // Deploy DexHooks with USDC as numeraire and mine address to have both before and after hooks
        uint160 targetBits = uint160(1); // Set least significant bit - which makes this a before hook only
        uint160 targetAddress = uint160(vm.randomUint()) & ~uint160(3); // Clear bottom 2 bits
        vm.etch(address(targetAddress | targetBits), address(new MockKyberSwapDexHooks(USDC)).code);
        hooks = MockKyberSwapDexHooks(address(targetAddress | targetBits));

        // Deploy and set up oracle registry with real Chainlink oracle
        vm.startPrank(users.owner);

        MockChainlink7726Adapter mockChainlink7726Adapter = new MockChainlink7726Adapter();
        mockChainlink7726Adapter.setFeed(WETH, USDC, CHAINLINK_ETH_USD);

        oracleRegistry = new OracleRegistry(users.owner, Authority(address(0)), ORACLE_UPDATE_DELAY);
        oracleRegistry.addOracle(WETH, USDC, IOracle(address(mockChainlink7726Adapter)));
        // heartbeat
        vm.stopPrank();

        setGuardian(users.guardian);
        setBaseVaultParameters(
            BaseVaultParameters({
                owner: users.owner,
                authority: Authority(address(0)),
                submitHooks: ISubmitHooks(address(0)),
                whitelist: IWhitelist(WHITELIST)
            })
        );
        setFeeVaultParameters(
            FeeVaultParameters({ feeCalculator: mockFeeCalculator, feeToken: feeToken, feeRecipient: address(1) })
        );
        deployCodeTo("SingleDepositorVault", VAULT);
        vault = SingleDepositorVault(VAULT);

        // Set up dex hooks
        vm.startPrank(users.owner);
        vault.acceptOwnership();
        vault.setGuardianRoot(users.guardian, RANDOM_BYTES32);
        hooks.setOracleRegistry(address(vault), address(oracleRegistry));
        hooks.setMaxDailyLoss(address(vault), MAX_DAILY_LOSS);
        hooks.setMaxSlippagePerTrade(address(vault), MAX_SLIPPAGE);
        vm.stopPrank();

        // Setup merkle tree for allowed operations
        leaves = new bytes32[](3);

        // Leaf for swap
        leaves[0] = MerkleHelper.getLeaf({
            target: KYBERSWAP_ROUTER,
            selector: IMetaAggregationRouterV2.swap.selector,
            hasValue: false,
            configurableHooksOffsets: new uint16[](0),
            hooks: address(hooks),
            callbackData: Encoder.emptyCallbackData(),
            extractedData: abi.encode(
                WETH, // allowed inputToken
                USDC, // allowed outputToken
                address(vault), // allowed outputReceiver
                KYBERSWAP_EXECUTOR // allowed executor
            )
        });

        // Leaf for swapSimpleMode
        leaves[1] = MerkleHelper.getLeaf({
            target: KYBERSWAP_ROUTER,
            selector: IMetaAggregationRouterV2.swapSimpleMode.selector,
            hasValue: false,
            configurableHooksOffsets: new uint16[](0),
            hooks: address(hooks),
            callbackData: Encoder.emptyCallbackData(),
            extractedData: abi.encode(
                WETH, // allowed inputToken
                USDC, // allowed outputToken
                address(vault), // allowed outputReceiver
                KYBERSWAP_EXECUTOR // allowed executor
            )
        });

        // Leaf for approving tokens
        leaves[2] = MerkleHelper.getLeaf({
            target: WETH,
            selector: IERC20.approve.selector,
            hasValue: false,
            configurableHooksOffsets: Encoder.makeExtractOffsetsArray(0),
            hooks: address(0),
            callbackData: Encoder.emptyCallbackData(),
            extractedData: abi.encode(
                KYBERSWAP_ROUTER // allowed spender
            )
        });

        vm.prank(users.owner);
        vault.setGuardianRoot(users.guardian, MerkleHelper.getRoot(leaves));

        vm.label(address(vault), "VAULT");
        vm.label(address(hooks), "DEX_HOOKS");
        vm.label(address(oracleRegistry), "ORACLE_REGISTRY");
        vm.label(address(KYBERSWAP_ROUTER), "KYBERSWAP_ROUTER");
        vm.label(address(WETH), "WETH");
        vm.label(address(USDC), "USDC");
        vm.label(address(CHAINLINK_ETH_USD), "CHAINLINK_ETH_USD_ORACLE");
        vm.label(address(CHAINLINK_USDC_USD), "CHAINLINK_USDC_USD_ORACLE");
    }

    function test_fork_swap_success() public {
        uint256 amountIn = INITIAL_WETH_BALANCE;
        uint256 amountOutMinimum = MIN_RETURN_AMOUNT_SWAP;

        // Fund vault with WETH
        deal(WETH, address(vault), amountIn);

        // Approve KYBERSWAP_ROUTER to spend WETH
        Operation[] memory ops = new Operation[](2);
        ops[0] = Operation({
            target: WETH,
            data: abi.encodeWithSelector(IERC20.approve.selector, KYBERSWAP_ROUTER, amountIn),
            clipboards: new Clipboard[](0),
            isStaticCall: false,
            callbackData: Encoder.emptyCallbackData(),
            configurableHooksOffsets: Encoder.makeExtractOffsetsArray(0),
            proof: MerkleHelper.getProof(leaves, 2),
            hooks: address(0),
            value: 0
        });
        ops[1] = Operation({
            target: KYBERSWAP_ROUTER,
            data: SWAP_DATA_WETH_USDC,
            clipboards: new Clipboard[](0),
            isStaticCall: false,
            callbackData: Encoder.emptyCallbackData(),
            configurableHooksOffsets: new uint16[](0),
            proof: MerkleHelper.getProof(leaves, 0),
            hooks: address(hooks),
            value: 0
        });

        // ~~~~~~~~~~ Verify ~~~~~~~~~~
        assertEq(IERC20(USDC).balanceOf(address(vault)), 0, "USDC balance should be 0");
        assertEq(IERC20(WETH).balanceOf(address(vault)), amountIn, "WETH balance should be amountIn");
        uint256 lossBefore = hooks.vaultStates(address(vault)).cumulativeDailyLossInNumeraire;
        uint256 amountInNumeraire = _convertToNumeraire(address(oracleRegistry), amountIn, WETH);
        uint256 amountOutNumeraire = _convertToNumeraire(address(oracleRegistry), amountOutMinimum, USDC);
        uint256 lossDuringTrade = _calculateLoss(amountInNumeraire, amountOutNumeraire);

        vm.expectEmit(true, true, true, true);
        emit IBaseSlippageHooks.TradeSlippageChecked(
            address(vault), WETH, USDC, amountInNumeraire, amountOutNumeraire, uint128(lossDuringTrade)
        );
        vm.prank(users.guardian);
        vault.submit(Encoder.encodeOperations(ops));

        assertGt(IERC20(USDC).balanceOf(address(vault)), 0, "USDC balance should be greater than expected output");
        assertEq(IERC20(WETH).balanceOf(address(vault)), 0, "WETH balance should be 0");

        uint256 lossAfter = hooks.vaultStates(address(vault)).cumulativeDailyLossInNumeraire;
        assertEq(lossAfter, lossBefore + lossDuringTrade, "Loss does not match the slippage from the swap");
    }

    function test_fork_swap_simple_success() public {
        uint256 amountIn = INITIAL_SIMPLE_WETH_BALANCE;
        uint256 amountOutMinimum = MIN_RETURN_AMOUNT_SIMPLE_SWAP;

        // Fund vault with WETH
        deal(WETH, address(vault), amountIn);

        // Approve KYBERSWAP_ROUTER to spend WETH
        Operation[] memory ops = new Operation[](2);
        ops[0] = Operation({
            target: WETH,
            data: abi.encodeWithSelector(IERC20.approve.selector, KYBERSWAP_ROUTER, amountIn),
            clipboards: new Clipboard[](0),
            isStaticCall: false,
            callbackData: Encoder.emptyCallbackData(),
            configurableHooksOffsets: Encoder.makeExtractOffsetsArray(0),
            proof: MerkleHelper.getProof(leaves, 2),
            hooks: address(0),
            value: 0
        });
        ops[1] = Operation({
            target: KYBERSWAP_ROUTER,
            data: SWAP_SIMPLE_DATA_WETH_USDC,
            clipboards: new Clipboard[](0),
            isStaticCall: false,
            callbackData: Encoder.emptyCallbackData(),
            configurableHooksOffsets: new uint16[](0),
            proof: MerkleHelper.getProof(leaves, 1),
            hooks: address(hooks),
            value: 0
        });

        // ~~~~~~~~~~ Verify ~~~~~~~~~~
        assertEq(IERC20(USDC).balanceOf(address(vault)), 0, "USDC balance should be 0");
        assertEq(IERC20(WETH).balanceOf(address(vault)), amountIn, "WETH balance should be amountIn");
        uint256 lossBefore = hooks.vaultStates(address(vault)).cumulativeDailyLossInNumeraire;
        uint256 amountInNumeraire = _convertToNumeraire(address(oracleRegistry), amountIn, WETH);
        uint256 amountOutNumeraire = _convertToNumeraire(address(oracleRegistry), amountOutMinimum, USDC);
        uint256 lossDuringTrade = _calculateLoss(amountInNumeraire, amountOutNumeraire);

        vm.expectEmit(true, true, true, true);
        emit IBaseSlippageHooks.TradeSlippageChecked(
            address(vault), WETH, USDC, amountInNumeraire, amountOutNumeraire, uint128(lossDuringTrade)
        );
        vm.prank(users.guardian);
        vault.submit(Encoder.encodeOperations(ops));

        assertGt(IERC20(USDC).balanceOf(address(vault)), 0, "USDC balance should be greater than expected output");
        assertEq(IERC20(WETH).balanceOf(address(vault)), 0, "WETH balance should be 0");

        uint256 lossAfter = hooks.vaultStates(address(vault)).cumulativeDailyLossInNumeraire;
        assertEq(lossAfter, lossBefore + lossDuringTrade, "Loss does not match the slippage from the swap");
    }

    function _convertToNumeraire(address oracleRegistry_, uint256 amount, address token)
        internal
        view
        returns (uint256)
    {
        if (token == USDC) return amount;
        return IOracle(oracleRegistry_).getQuote(amount, token, USDC);
    }
}
